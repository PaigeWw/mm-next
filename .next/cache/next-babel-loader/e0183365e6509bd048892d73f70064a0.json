{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Flex, Text, Box, Image, Button } from \"rebass\";\nimport Head from \"../components/nav\";\nimport EditBox from \"../components/made-edit-box\";\nimport BigBox from \"../components/made-big-box\";\nimport StyleItem from \"../components/made-style-item\";\nimport { getPageQuery } from \"../utils/helper\";\nimport Router from \"next/router\";\nimport request from \"../utils/request.js\"; // import SelectAssignTool from \"../components/select-assign-tool\"\n\nexport default (() => {\n  const {\n    0: styleDetails,\n    1: setStyleDetails\n  } = useState([]);\n  const {\n    0: showBigBox,\n    1: setShowBigBox\n  } = useState(false);\n  const {\n    0: showEditBox,\n    1: setShowEditBox\n  } = useState(false);\n  const {\n    0: curItemIndex,\n    1: setCurItemIndex\n  } = useState(0);\n  const {\n    0: styleInitData,\n    1: setStyleInitData\n  } = useState([[], [], [], [], [], []]);\n  const {\n    0: collectList,\n    1: setCollectList\n  } = useState([]);\n  useEffect(() => {\n    const getStyleDetails = async () => {\n      let query = getPageQuery();\n      console.log(query);\n      let reqList = [];\n      const req = await request(\"style/detail\", {\n        _id: query.id\n      }, \"get\");\n      reqList.push(req);\n\n      for (let i = 0; i < 6; i++) {\n        styleInitData[i].push({\n          imgUrl: req.imgUrl,\n          value: false\n        });\n      }\n\n      if (query.id1) {\n        const req1 = await request(\"style/detail\", {\n          _id: query.id1\n        }, \"get\");\n        reqList.push(req1);\n\n        for (let i = 0; i < 6; i++) {\n          styleInitData[i].push({\n            imgUrl: req1.imgUrl,\n            value: false\n          });\n        }\n      }\n\n      setStyleInitData([].concat(styleInitData));\n      setStyleDetails(reqList);\n    };\n\n    getStyleDetails();\n  }, []);\n\n  const handleConfirmMade = (colorIds, imgUrls) => {\n    console.log(colorIds, imgUrls);\n    if (!colorIds[0]) return;\n    styleInitData[curItemIndex] = [{\n      colorId: colorIds[0],\n      imgUrl: imgUrls[0]\n    }];\n\n    if (styleDetails.length > 1) {\n      if (!colorIds[1]) return;\n      styleInitData[curItemIndex].push({\n        colorId: colorIds[1],\n        imgUrl: imgUrls[1]\n      });\n    }\n\n    setStyleInitData([].concat(styleInitData));\n  };\n\n  const handleAddFavorite = async index => {\n    if (!styleInitData[index][0].colorId) return;\n    console.log(styleInitData[index][0]);\n    let params = [{\n      styleId: styleDetails[0]._id,\n      colorId: styleInitData[index][0].colorId,\n      front: styleInitData[index][0].imgUrl\n    }];\n    collectList.push(index);\n    setCollectList([].concat(collectList));\n\n    if (styleDetails.length > 1) {\n      if (!styleInitData[index][1].colorId) return;\n      params.push({\n        styleId: styleDetails[1]._id,\n        colorId: styleInitData[index][1].colorId,\n        front: styleInitData[index][1].imgUrl\n      });\n    }\n\n    const res = await request(\"/user/addFavorite\", {\n      styleAndColor: params\n    }, \"post\"); // setStyleDetails([].concat(styleDetails))\n\n    console.log(res);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Flex, {\n    flexDirection: \"column\"\n  }, __jsx(Head, null), __jsx(Flex, {\n    flexDirection: \"column\"\n  }, __jsx(Flex, {\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    fontSize: \"0.23px\",\n    bg: \"#000\",\n    color: \"#fff\",\n    width: \"19.2rem\",\n    height: \"1.12rem\"\n  }, __jsx(Text, null, \"TOPS\"), __jsx(Text, null, \"BOTTOMS\")), __jsx(Flex, {\n    flexWrap: \"wrap\"\n  }, styleInitData.map((style, index) => __jsx(StyleItem, {\n    key: `${index}-style`,\n    styleList: style,\n    index: index,\n    collected: collectList.indexOf(index) >= 0,\n    openBigBox: () => {\n      setShowBigBox(true);\n    },\n    onAddFavorite: () => {\n      handleAddFavorite(index);\n    },\n    openEditBox: () => {\n      setShowEditBox(true);\n      setCurItemIndex(index);\n    }\n  }))), __jsx(Flex, {\n    fontSize: \"0.27rem\",\n    color: \"#fff\",\n    justifyContent: \"\"\n  }, __jsx(Button, {\n    height: \"1.13rem\",\n    width: \"9.6rem\",\n    bg: \"#000\",\n    variant: \"primary\",\n    padding: \"0\",\n    height: \"1.13rem\",\n    width: \"9.6rem\",\n    sx: {\n      borderRadius: 0,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      Router.back();\n    }\n  }, \"< RETURN\"), __jsx(Button, {\n    height: \"1.13rem\",\n    width: \"9.6rem\",\n    bg: \"#FF8E6C\",\n    variant: \"primary\",\n    padding: \"0\",\n    height: \"1.13rem\",\n    width: \"9.6rem\",\n    sx: {\n      borderRadius: 0,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      Router.push(\"/mine\");\n    }\n  }, \"COMPLETE\"))), showBigBox ? __jsx(BigBox, {\n    styleDetails: styleDetails,\n    curStyle: styleInitData[curItemIndex],\n    onClose: () => {\n      setShowBigBox(false);\n    }\n  }) : null, showEditBox ? __jsx(EditBox, {\n    styleDetails: styleDetails,\n    curStyle: styleInitData[curItemIndex],\n    confirmMade: handleConfirmMade,\n    onClose: () => {\n      setShowEditBox(false);\n    }\n  }) : null));\n});","map":null,"metadata":{},"sourceType":"module"}