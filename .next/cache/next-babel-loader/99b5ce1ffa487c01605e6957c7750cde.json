{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Flex, Text, Box, Button, Image } from \"rebass\";\nimport { Title } from \"./aisle-button\";\nimport { ColorList, PaintList } from \"../color-and-paint\";\nimport request from \"../../utils/request.js\";\nimport { baseUrl } from \"../../utils/helper\";\nexport default (function (props) {\n  var _props$currentSeleted = props.currentSeleted,\n      sid = _props$currentSeleted.sid,\n      top = _props$currentSeleted.top,\n      col = _props$currentSeleted.col,\n      styleItem = _props$currentSeleted.styleItem;\n\n  var _useState = useState(0),\n      curChannelIndex = _useState[0],\n      setCurChannelIndex = _useState[1]; // const [curChannelInfo, setCurChannelInfo] = useState({})\n\n\n  var _useState2 = useState(false),\n      channelList = _useState2[0],\n      setChannelList = _useState2[1];\n\n  var _useState3 = useState([]),\n      colorList = _useState3[0],\n      setColorList = _useState3[1];\n\n  var _useState4 = useState([]),\n      paintList = _useState4[0],\n      setPaintList = _useState4[1];\n\n  var _useState5 = useState([]),\n      sizeList = _useState5[0],\n      setSizeList = _useState5[1];\n\n  var _useState6 = useState([]),\n      channelInfoList = _useState6[0],\n      setChannelInfoList = _useState6[1];\n\n  useEffect(function () {\n    var getChannels =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var req;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return request(\"channel/getList\", {}, \"get\");\n\n              case 2:\n                req = _context.sent;\n                setChannelList(req); // console.log(\"getChannels\", req)\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getChannels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getChannels();\n  }, []);\n  useEffect(function () {\n    if (props.currentSeleted) {\n      var getStyle =\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          var req;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return request(\"style/detail\", {\n                    _id: sid\n                  }, \"get\");\n\n                case 2:\n                  req = _context2.sent;\n\n                  if (req) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 5:\n                  // console.log(\"getStyle\", req)\n                  setCurChannelIndex(0);\n                  setPaintList(req.flowerColors);\n                  setColorList(req.plainColors);\n                  setColorList(req.plainColors);\n                  setChannelInfoList(req.channels);\n                  setSizeList(req.size.values);\n\n                case 11:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function getStyle() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      getStyle();\n    }\n  }, [props.currentSeleted]);\n  var left = (col + 2) * 3.2;\n\n  if (left > 19.2 - 6.4) {\n    left = (col - 1) * 3.2;\n  }\n\n  var handleSelect = function handleSelect(item, type) {\n    var curChannelId = channelList[curChannelIndex]._id;\n    var Index = channelInfoList.findIndex(function (x) {\n      return x.channelId === curChannelId;\n    }); // if (cIndex >= 0)\n\n    console.log(\"curChannelId\", curChannelId);\n    console.log(\"Index\", channelInfoList); // console.log(\"Index\", channelInfoList[Index])\n\n    var curChannelInfo = Index >= 0 ? channelInfoList[Index] : {};\n\n    switch (type) {\n      case \"color\":\n        // const cIndex = colorList.findIndex(x => x.colorId === item.colorId)\n        // colorList[cIndex].selected = !colorList[cIndex].selected\n        // colorList.splice(index, 1, item.selected=true)\n        // setColorList([].concat(colorList))\n        var cIndex = curChannelInfo.plainColorIds.indexOf(item.colorId); // console.log(cIndex)\n\n        if (cIndex < 0) {\n          curChannelInfo.plainColorIds.push(item.colorId);\n        } else {\n          curChannelInfo.plainColorIds.splice(cIndex, 1);\n        }\n\n        setChannelInfoList([].concat(channelInfoList));\n        break;\n\n      case \"paint\":\n        var pIndex = curChannelInfo.flowerColorIds.indexOf(item.colorId);\n\n        if (pIndex < 0) {\n          curChannelInfo.flowerColorIds.push(item.colorId);\n        } else {\n          curChannelInfo.flowerColorIds.splice(pIndex, 1);\n        }\n\n        setChannelInfoList([].concat(channelInfoList));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleSelectChannelByIndex = function handleSelectChannelByIndex(index) {\n    setCurChannelIndex(index);\n  };\n\n  var handleCommitSelected = function handleCommitSelected(index) {\n    var curChannelId = channelList[curChannelIndex]._id;\n    var Index = channelInfoList.findIndex(function (x) {\n      return x.channelId === curChannelId;\n    }); // if (cIndex >= 0)\n\n    var curChannelInfo = Index >= 0 ? channelInfoList[Index] : {};\n    console.log({\n      _id: sid,\n      channelId: channelList[curChannelIndex]._id,\n      plainColorIds: curChannelInfo.plainColorIds,\n      flowerColorIds: curChannelInfo.flowerColorIds\n    });\n    var res = request(\"/style/assign\", {\n      _id: sid,\n      channelId: channelList[curChannelIndex]._id,\n      plainColorIds: curChannelInfo.plainColorIds,\n      flowerColorIds: curChannelInfo.flowerColorIds\n    }, \"post\"); // setChannelInfoList(res.channels)\n    // console.log(res)\n  };\n\n  if (!channelList) return null; // console.log(channelList, curChannelIndex)\n\n  return __jsx(Flex, {\n    width: \"6.4rem\",\n    bg: \"#fff\",\n    flexDirection: \"column\",\n    fontSize: \"0.18rem\",\n    color: \"#000\",\n    p: \"0.5rem 0.7rem 0 0.7rem\",\n    sx: {\n      position: \"absolute\",\n      top: \"\".concat(top, \"px\"),\n      left: \"\".concat(left, \"rem\")\n    }\n  }, __jsx(Title, {\n    styleNo: styleItem.styleNo,\n    channelList: channelList,\n    channelInfoList: channelInfoList,\n    onClose: props.onClose,\n    curChannelIndex: curChannelIndex,\n    onSelectChannelByIndex: handleSelectChannelByIndex\n  }), __jsx(Flex, {\n    flexDirection: \"column\"\n  }, __jsx(Box, {\n    width: \"100%\",\n    mb: \"0.4rem\"\n  }, __jsx(Text, {\n    mb: \"0.1rem\"\n  }, \"SIZE\\u300CCUP\\u300D\"), __jsx(Flex, {\n    width: \"100%\",\n    lineHeight: \"0.36rem\"\n  }, sizeList.map(function (size) {\n    return __jsx(Text, {\n      mr: \"0.2rem\"\n    }, size.name);\n  }))), __jsx(ColorList, {\n    colorList: colorList,\n    handleSelect: handleSelect,\n    curChannelId: channelList[curChannelIndex]._id,\n    channelInfoList: channelInfoList\n  }), __jsx(PaintList, {\n    paintList: paintList,\n    handleSelect: handleSelect,\n    curChannelId: channelList[curChannelIndex]._id,\n    channelInfoList: channelInfoList\n  })), __jsx(Button, {\n    variant: \"primary\",\n    height: \"0.7rem\",\n    width: \"6.4rem\",\n    bg: \"#1B1B1B\",\n    color: \"#fff\",\n    padding: \"0\",\n    ml: \"-0.7rem\",\n    sx: {\n      borderRadius: 0,\n      fontSize: \"0.14rem\",\n      cursor: \"pointer\"\n    },\n    onClick: handleCommitSelected\n  }, \"FINISH\"));\n});","map":null,"metadata":{},"sourceType":"module"}