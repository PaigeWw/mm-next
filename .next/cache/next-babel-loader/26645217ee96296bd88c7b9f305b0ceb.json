{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Flex, Text, Box, Button, Image } from \"rebass\";\nimport { Title } from \"./aisle-button\";\nimport { ColorList, PaintList } from \"../color-and-paint\";\nimport request from \"../../utils/request.js\";\nimport { baseUrl } from \"../../utils/helper\";\nexport default (props => {\n  const {\n    sid,\n    top,\n    col,\n    styleItem\n  } = props.currentSeleted;\n  const {\n    0: curChannelIndex,\n    1: setCurChannelIndex\n  } = useState(0); // const [curChannelInfo, setCurChannelInfo] = useState({})\n\n  const {\n    0: channelList,\n    1: setChannelList\n  } = useState(false);\n  const {\n    0: colorList,\n    1: setColorList\n  } = useState([]);\n  const {\n    0: paintList,\n    1: setPaintList\n  } = useState([]);\n  const {\n    0: sizeList,\n    1: setSizeList\n  } = useState([]);\n  const {\n    0: channelInfoList,\n    1: setChannelInfoList\n  } = useState([]);\n  useEffect(() => {\n    const getChannels = async () => {\n      const req = await request(\"channel/getList\", {}, \"get\");\n      setChannelList(req); // console.log(\"getChannels\", req)\n    };\n\n    getChannels();\n  }, []);\n  useEffect(() => {\n    if (props.currentSeleted) {\n      const getStyle = async () => {\n        const req = await request(\"style/detail\", {\n          _id: sid\n        }, \"get\");\n        if (!req) return; // console.log(\"getStyle\", req)\n\n        setCurChannelIndex(0);\n        setPaintList(req.flowerColors);\n        setColorList(req.plainColors);\n        setColorList(req.plainColors);\n        setChannelInfoList(req.channels);\n        setSizeList(req.size.values);\n      };\n\n      getStyle();\n    }\n  }, [props.currentSeleted]);\n  let left = (col + 2) * 3.2;\n\n  if (left > 19.2 - 6.4) {\n    left = (col - 1) * 3.2;\n  }\n\n  const handleSelect = (item, type) => {\n    let curChannelId = channelList[curChannelIndex]._id;\n    let Index = channelInfoList.findIndex(x => x.channelId === curChannelId); // if (cIndex >= 0)\n\n    console.log(\"curChannelId\", curChannelId);\n    console.log(\"Index\", channelInfoList); // console.log(\"Index\", channelInfoList[Index])\n\n    let curChannelInfo = Index >= 0 ? channelInfoList[Index] : {};\n\n    switch (type) {\n      case \"color\":\n        // const cIndex = colorList.findIndex(x => x.colorId === item.colorId)\n        // colorList[cIndex].selected = !colorList[cIndex].selected\n        // colorList.splice(index, 1, item.selected=true)\n        // setColorList([].concat(colorList))\n        const cIndex = curChannelInfo.plainColorIds.indexOf(item.colorId); // console.log(cIndex)\n\n        if (cIndex < 0) {\n          curChannelInfo.plainColorIds.push(item.colorId);\n        } else {\n          curChannelInfo.plainColorIds.splice(cIndex, 1);\n        }\n\n        setChannelInfoList([].concat(channelInfoList));\n        break;\n\n      case \"paint\":\n        const pIndex = curChannelInfo.flowerColorIds.indexOf(item.colorId);\n\n        if (pIndex < 0) {\n          curChannelInfo.flowerColorIds.push(item.colorId);\n        } else {\n          curChannelInfo.flowerColorIds.splice(pIndex, 1);\n        }\n\n        setChannelInfoList([].concat(channelInfoList));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSelectChannelByIndex = index => {\n    setCurChannelIndex(index);\n  };\n\n  const handleCommitSelected = index => {\n    let curChannelId = channelList[curChannelIndex]._id;\n    let Index = channelInfoList.findIndex(x => x.channelId === curChannelId); // if (cIndex >= 0)\n\n    let curChannelInfo = Index >= 0 ? channelInfoList[Index] : {};\n    console.log({\n      _id: sid,\n      channelId: channelList[curChannelIndex]._id,\n      plainColorIds: curChannelInfo.plainColorIds,\n      flowerColorIds: curChannelInfo.flowerColorIds\n    });\n    const res = request(\"/style/assign\", {\n      _id: sid,\n      channelId: channelList[curChannelIndex]._id,\n      plainColorIds: curChannelInfo.plainColorIds,\n      flowerColorIds: curChannelInfo.flowerColorIds\n    }, \"post\"); // setChannelInfoList(res.channels)\n    // console.log(res)\n  };\n\n  if (!channelList) return null; // console.log(channelList, curChannelIndex)\n\n  return __jsx(Flex, {\n    width: \"6.4rem\",\n    bg: \"#fff\",\n    flexDirection: \"column\",\n    fontSize: \"0.18rem\",\n    color: \"#000\",\n    p: \"0.5rem 0.7rem 0 0.7rem\",\n    sx: {\n      position: \"absolute\",\n      top: `${top}px`,\n      left: `${left}rem`\n    }\n  }, __jsx(Title, {\n    styleNo: styleItem.styleNo,\n    channelList: channelList,\n    channelInfoList: channelInfoList,\n    onClose: props.onClose,\n    curChannelIndex: curChannelIndex,\n    onSelectChannelByIndex: handleSelectChannelByIndex\n  }), __jsx(Flex, {\n    flexDirection: \"column\"\n  }, __jsx(Box, {\n    width: \"100%\",\n    mb: \"0.4rem\"\n  }, __jsx(Text, {\n    mb: \"0.1rem\"\n  }, \"SIZE\\u300CCUP\\u300D\"), __jsx(Flex, {\n    width: \"100%\",\n    lineHeight: \"0.36rem\"\n  }, sizeList.map(size => __jsx(Text, {\n    mr: \"0.2rem\"\n  }, size.name)))), __jsx(ColorList, {\n    colorList: colorList,\n    handleSelect: handleSelect,\n    curChannelId: channelList[curChannelIndex]._id,\n    channelInfoList: channelInfoList\n  }), __jsx(PaintList, {\n    paintList: paintList,\n    handleSelect: handleSelect,\n    curChannelId: channelList[curChannelIndex]._id,\n    channelInfoList: channelInfoList\n  })), __jsx(Button, {\n    variant: \"primary\",\n    height: \"0.7rem\",\n    width: \"6.4rem\",\n    bg: \"#1B1B1B\",\n    color: \"#fff\",\n    padding: \"0\",\n    ml: \"-0.7rem\",\n    sx: {\n      borderRadius: 0,\n      fontSize: \"0.14rem\",\n      cursor: \"pointer\"\n    },\n    onClick: handleCommitSelected\n  }, \"FINISH\"));\n});","map":null,"metadata":{},"sourceType":"module"}