{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Flex, Text, Box, Image, Button } from \"rebass\";\nimport Modal from \"./modal\";\nimport { ColorList, PaintList } from \"./color-and-paint\";\nimport request from \"../utils/request.js\";\nimport { baseUrl } from \"../utils/helper\";\nexport default (function (props) {\n  var styleDetails = props.styleDetails,\n      curStyle = props.curStyle;\n  console.log(styleDetails, curStyle);\n  var tempSelectedIds = [curStyle[0].colorId];\n  var tempSelectedImgs = [curStyle[0].imgUrl];\n\n  if (curStyle.length > 1) {\n    tempSelectedIds.push(curStyle[1].colorId);\n    tempSelectedImgs.push(curStyle[1].imgUrl);\n  } else {\n    tempSelectedIds.push(false);\n    tempSelectedImgs.push(false);\n  }\n\n  var _useState = useState(tempSelectedIds),\n      curSelectedColorIds = _useState[0],\n      setCurSelectedColorIds = _useState[1];\n\n  var _useState2 = useState(0),\n      curStyleIndex = _useState2[0],\n      setCurStyleIndex = _useState2[1];\n\n  var _useState3 = useState(tempSelectedImgs),\n      curStyleImgs = _useState3[0],\n      setCurStyleImgs = _useState3[1]; // const [colorList, setColorList] = useState(styleDetails[0].plainColors)\n\n\n  var handleSelect = function handleSelect(item, type) {\n    if (item.colorId === curSelectedColorIds[curStyleIndex]) {\n      curSelectedColorIds[curStyleIndex] = false;\n      setCurSelectedColorIds([].concat(curSelectedColorIds));\n      curStyleImgs.splice(curStyleIndex, 1, false);\n      setCurStyleImgs([].concat(curStyleImgs));\n    } else {\n      curSelectedColorIds[curStyleIndex] = item.colorId;\n      setCurSelectedColorIds([].concat(curSelectedColorIds)); // setCurSelectedColorId()\n\n      switch (type) {\n        case \"color\":\n          var cIndex = styleDetails[curStyleIndex].plainColors.findIndex(function (x) {\n            return x.colorId === item.colorId;\n          });\n          curStyleImgs.splice(curStyleIndex, 1, styleDetails[curStyleIndex].plainColors[cIndex].front);\n          setCurStyleImgs([].concat(curStyleImgs));\n          break;\n\n        case \"paint\":\n          var pIndex = styleDetails[curStyleIndex].flowerColors.findIndex(function (x) {\n            return x.colorId === item.colorId;\n          });\n          curStyleImgs.splice(curStyleIndex, 1, styleDetails[curStyleIndex].flowerColors[pIndex].front);\n          setCurStyleImgs([].concat(curStyleImgs));\n          break;\n\n        default:\n          break;\n      }\n    }\n  }; // useEffect(() => {\n  // \tsetCurSelectedColorId(false)\n  // }, [curStyleIndex])\n\n\n  return __jsx(Modal, {\n    onClose: props.onClose\n  }, __jsx(Box, {\n    width: \"14rem\",\n    fontSize: \"0.18rem\",\n    color: \"#000\"\n  }, __jsx(Flex, {\n    justifyContent: \"space-between\"\n  }, __jsx(Flex, {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    width: \"6.75rem\",\n    sx: {\n      cursor: \"pointer\"\n    }\n  }, _Array$isArray(styleDetails) && styleDetails.map(function (style, index) {\n    return __jsx(Flex, {\n      width: \"6.75rem\",\n      padding: \"1rem 0\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      sx: {\n        border: curStyleIndex === index ? \"1px solid #000\" : \"1px solid #A0A0A0\"\n      },\n      onClick: function onClick() {\n        setCurStyleIndex(index);\n      }\n    }, __jsx(Image, {\n      src: baseUrl + (curStyleImgs[index] ? curStyleImgs[index] : style.imgUrl),\n      sx: {\n        width: \"3.79rem\",\n        minWidth: \"14px\",\n        minHeight: \"14px\"\n      }\n    }));\n  })), __jsx(Flex, {\n    flexDirection: \"column\",\n    flexGrow: 1,\n    pl: \"0.6rem\"\n  }, __jsx(Box, {\n    width: [1],\n    mb: \"0.6rem\"\n  }, __jsx(Text, {\n    fontSize: \"0.18rem\",\n    fontWeight: \"bolder\"\n  }, \"SECTION NUMBER\"), __jsx(Text, {\n    fontSize: \"0.1rem\",\n    m: \"0.16rem 0\"\n  }, styleDetails[curStyleIndex].styleNo)), __jsx(ColorList, {\n    colorList: styleDetails[curStyleIndex].plainColors,\n    handleSelect: handleSelect,\n    curChannelId: 0,\n    channelInfoList: [{\n      channelId: 0,\n      plainColorIds: [curSelectedColorIds[curStyleIndex]]\n    }]\n  }), __jsx(Box, {\n    height: \"0.3rem\",\n    width: [1]\n  }), __jsx(PaintList, {\n    paintList: styleDetails[curStyleIndex].flowerColors,\n    handleSelect: handleSelect,\n    curChannelId: 0,\n    channelInfoList: [{\n      channelId: 0,\n      flowerColorIds: [curSelectedColorIds[curStyleIndex]]\n    }]\n  }), __jsx(Button, {\n    variant: \"primary\",\n    height: \"0.7rem\",\n    width: \"100%\",\n    bg: \"#1B1B1B\",\n    color: \"#fff\",\n    padding: \"0\",\n    mt: \"0.7rem\",\n    sx: {\n      borderRadius: 0,\n      fontSize: \"0.14rem\",\n      cursor: \"pointer\"\n    },\n    onClick: function onClick() {\n      if (styleDetails.length > 1 && !curStyleImgs[1]) return;\n      props.confirmMade(curSelectedColorIds, curStyleImgs);\n      props.onClose();\n    }\n  }, \"FINISH\")))));\n});","map":null,"metadata":{},"sourceType":"module"}