{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Flex, Text, Box, Button, Row, Column } from \"rebass\";\nimport Table, { TableLine, ProductInfo } from \"./base-table\";\nimport ShowStyle from \"../show-style\";\nimport InputNumber from \"../number-input\";\nimport request from \"../../utils/request\";\nexport default (props => {\n  const {\n    0: orderList,\n    1: setOrderList\n  } = useState([]);\n  const {\n    0: orderDetailList,\n    1: setOrderDetailList\n  } = useState([]);\n  const {\n    0: selectList,\n    1: setSelectList\n  } = useState([]);\n\n  const getOrderList = async () => {\n    const res = await request(\"/order/getMyList\", {\n      isSend: 1\n    }); // console.log(\"----res----\", res)\n\n    if (!res) return;\n    setOrderDetailList(res);\n    const data = res.map(order => {\n      let orderData = order.orderData;\n      let threeViewsList = [];\n      let quantity = 0;\n      let price = 0;\n      orderData.map(item => {\n        let threeViews = item.favorite.styleAndColor.map(x => {\n          return {\n            POSITIVE: x.front\n          };\n        });\n        quantity += item.total;\n        price += item.totalPrice;\n        threeViewsList.push(threeViews);\n      });\n      return {\n        date: order.updateTime,\n        id: order._id\n      };\n    });\n    setOrderList(data);\n  };\n\n  useEffect(() => {\n    getOrderList();\n  }, []);\n\n  const handleSelect = (index, item) => {\n    const pos = selectList.findIndex(x => x.index === index);\n\n    if (pos < 0) {\n      selectList.push(_objectSpread({\n        index\n      }, item));\n    } else {\n      selectList.splice(pos, 1);\n    }\n\n    setSelectList([].concat(selectList));\n  };\n\n  const handleSendOrder = async () => {\n    console.log(selectList);\n    const res = await request(\"/order/send\", {\n      list: selectList.map(s => s.id)\n    }, \"post\");\n\n    if (res) {\n      props.nextStep();\n    }\n  };\n\n  return __jsx(Flex, {\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    sx: {\n      cursor: \"pointer\",\n      height: \"100%\",\n      background: \"#FFF0E5\"\n    }\n  }, __jsx(Flex, {\n    sx: {\n      padding: \"0 18px 18px 18px\"\n    },\n    alignItems: \"stretch\"\n  }, __jsx(Table, {\n    sx: {\n      margin: \"0\",\n      marginRight: \"1px\",\n      width: \"100%\"\n    },\n    titles: [{\n      name: \"00\",\n      width: \"2/22\",\n      isHide: true\n    }, {\n      name: \"ORDER NUMBER\",\n      width: \"2/22\"\n    }, {\n      name: \"ORDER DATE\",\n      width: \"4/22\"\n    }, {\n      name: \"CLIENT'S NAME\",\n      width: \"1/22\"\n    }, {\n      name: \"ACTION\",\n      width: \"2/22\"\n    }]\n  }, orderList.map((order, index) => __jsx(TableLine, {\n    haveDel: true,\n    onDel: () => {\n      handleDel(index, {});\n    },\n    Bigger: true // onEdit={() => {\n    // \t// setEditIndex(index)\n    // \t// setShowEditBox(true)\n    // }}\n    ,\n    key: `${index}-my-order`\n  }, __jsx(Text, {\n    lineHeight: \"0.6rem\"\n  }, index), __jsx(Text, null, order.id), __jsx(Text, null, order.date), __jsx(Text, null, \"?\"))))));\n});","map":null,"metadata":{},"sourceType":"module"}