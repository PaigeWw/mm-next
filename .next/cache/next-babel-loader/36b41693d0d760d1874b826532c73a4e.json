{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/paige/Desktop/workspace/mm-next/components/select-assign-tool/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Flex, Text, Box, Button, Image } from \"rebass\";\nimport { Title } from \"./aisle-button\";\nimport { ColorList, PaintList } from \"../color-and-paint\";\nimport request from \"../../utils/request.js\";\nimport { baseUrl } from \"../../utils/helper\";\nexport default (function (props) {\n  var _props$currentSeleted = props.currentSeleted,\n      sid = _props$currentSeleted.sid,\n      top = _props$currentSeleted.top,\n      col = _props$currentSeleted.col,\n      styleItem = _props$currentSeleted.styleItem;\n\n  var _useState = useState(0),\n      curChannelIndex = _useState[0],\n      setCurChannelIndex = _useState[1]; // const [curChannelInfo, setCurChannelInfo] = useState({})\n\n\n  var _useState2 = useState(false),\n      channelList = _useState2[0],\n      setChannelList = _useState2[1];\n\n  var _useState3 = useState([]),\n      colorList = _useState3[0],\n      setColorList = _useState3[1];\n\n  var _useState4 = useState([]),\n      paintList = _useState4[0],\n      setPaintList = _useState4[1];\n\n  var _useState5 = useState([]),\n      sizeList = _useState5[0],\n      setSizeList = _useState5[1];\n\n  var _useState6 = useState([]),\n      channelInfoList = _useState6[0],\n      setChannelInfoList = _useState6[1];\n\n  useEffect(function () {\n    var getChannels =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var req;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return request(\"channel/getList\", {}, \"get\");\n\n              case 2:\n                req = _context.sent;\n                setChannelList(req); // console.log(\"getChannels\", req)\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getChannels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getChannels();\n  }, []);\n  useEffect(function () {\n    if (props.currentSeleted) {\n      var getStyle =\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          var req;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return request(\"style/detail\", {\n                    _id: sid\n                  }, \"get\");\n\n                case 2:\n                  req = _context2.sent;\n\n                  if (req) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 5:\n                  // console.log(\"getStyle\", req)\n                  setCurChannelIndex(0);\n                  setPaintList(req.flowerColors);\n                  setColorList(req.plainColors);\n                  setColorList(req.plainColors);\n                  setChannelInfoList(req.channels);\n                  setSizeList(req.size.values);\n\n                case 11:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function getStyle() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      getStyle();\n    }\n  }, [props.currentSeleted]);\n  var left = (col + 2) * 3.2;\n\n  if (left > 19.2 - 6.4) {\n    left = (col - 1) * 3.2;\n  }\n\n  var handleSelect = function handleSelect(item, type) {\n    var curChannelId = channelList[curChannelIndex]._id;\n    var Index = channelInfoList.findIndex(function (x) {\n      return x.channelId === curChannelId;\n    }); // if (cIndex >= 0)\n\n    console.log(\"curChannelId\", curChannelId);\n    console.log(\"Index\", Index);\n    console.log(\"Index\", channelInfoList[Index]);\n    var curChannelInfo = Index >= 0 ? channelInfoList[Index] : {};\n\n    switch (type) {\n      case \"color\":\n        // const cIndex = colorList.findIndex(x => x.colorId === item.colorId)\n        // colorList[cIndex].selected = !colorList[cIndex].selected\n        // colorList.splice(index, 1, item.selected=true)\n        // setColorList([].concat(colorList))\n        var cIndex = curChannelInfo.plainColorIds.indexOf(item.colorId); // console.log(cIndex)\n\n        if (cIndex < 0) {\n          curChannelInfo.plainColorIds.push(item.colorId);\n        } else {\n          curChannelInfo.plainColorIds.splice(cIndex, 1);\n        }\n\n        setChannelInfoList([].concat(channelInfoList));\n        break;\n\n      case \"paint\":\n        var pIndex = curChannelInfo.flowerColorIds.indexOf(item.colorId);\n\n        if (pIndex < 0) {\n          curChannelInfo.flowerColorIds.push(item.colorId);\n        } else {\n          curChannelInfo.flowerColorIds.splice(pIndex, 1);\n        }\n\n        setChannelInfoList([].concat(channelInfoList));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleSelectChannelByIndex = function handleSelectChannelByIndex(index) {\n    setCurChannelIndex(index);\n  };\n\n  var handleCommitSelected = function handleCommitSelected(index) {\n    var curChannelId = channelList[curChannelIndex]._id;\n    var Index = channelInfoList.findIndex(function (x) {\n      return x.channelId === curChannelId;\n    }); // if (cIndex >= 0)\n\n    var curChannelInfo = Index >= 0 ? channelInfoList[Index] : {};\n    console.log({\n      _id: sid,\n      channelId: channelList[curChannelIndex]._id,\n      plainColorIds: curChannelInfo.plainColorIds,\n      flowerColorIds: curChannelInfo.flowerColorIds\n    });\n    var res = request(\"/style/assign\", {\n      _id: sid,\n      channelId: channelList[curChannelIndex]._id,\n      plainColorIds: curChannelInfo.plainColorIds,\n      flowerColorIds: curChannelInfo.flowerColorIds\n    }, \"post\"); // setChannelInfoList(res.channels)\n    // console.log(res)\n  };\n\n  if (!channelList) return null; // console.log(channelList, curChannelIndex)\n\n  return __jsx(Flex, {\n    width: \"6.4rem\",\n    bg: \"#fff\",\n    flexDirection: \"column\",\n    fontSize: \"0.18rem\",\n    color: \"#000\",\n    p: \"0.5rem 0.7rem 0 0.7rem\",\n    sx: {\n      position: \"absolute\",\n      top: \"\".concat(top, \"px\"),\n      left: \"\".concat(left, \"rem\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(Title, {\n    styleNo: styleItem.styleNo,\n    channelList: channelList,\n    channelInfoList: channelInfoList,\n    onClose: props.onClose,\n    curChannelIndex: curChannelIndex,\n    onSelectChannelByIndex: handleSelectChannelByIndex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), __jsx(Flex, {\n    flexDirection: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, __jsx(Box, {\n    width: \"100%\",\n    mb: \"0.4rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, __jsx(Text, {\n    mb: \"0.1rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"SIZE\\u300CCUP\\u300D\"), __jsx(Flex, {\n    width: \"100%\",\n    lineHeight: \"0.36rem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, sizeList.map(function (size) {\n    return __jsx(Text, {\n      mr: \"0.2rem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, size.name);\n  }))), __jsx(ColorList, {\n    colorList: colorList,\n    handleSelect: handleSelect,\n    curChannelId: channelList[curChannelIndex]._id,\n    channelInfoList: channelInfoList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), __jsx(PaintList, {\n    paintList: paintList,\n    handleSelect: handleSelect,\n    curChannelId: channelList[curChannelIndex]._id,\n    channelInfoList: channelInfoList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })), __jsx(Button, {\n    variant: \"primary\",\n    height: \"0.7rem\",\n    width: \"6.4rem\",\n    bg: \"#1B1B1B\",\n    color: \"#fff\",\n    padding: \"0\",\n    ml: \"-0.7rem\",\n    sx: {\n      borderRadius: 0,\n      fontSize: \"0.14rem\",\n      cursor: \"pointer\"\n    },\n    onClick: handleCommitSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"FINISH\"));\n});","map":{"version":3,"sources":["/Users/paige/Desktop/workspace/mm-next/components/select-assign-tool/index.js"],"names":["React","useEffect","useState","Flex","Text","Box","Button","Image","Title","ColorList","PaintList","request","baseUrl","props","currentSeleted","sid","top","col","styleItem","curChannelIndex","setCurChannelIndex","channelList","setChannelList","colorList","setColorList","paintList","setPaintList","sizeList","setSizeList","channelInfoList","setChannelInfoList","getChannels","req","getStyle","_id","flowerColors","plainColors","channels","size","values","left","handleSelect","item","type","curChannelId","Index","findIndex","x","channelId","console","log","curChannelInfo","cIndex","plainColorIds","indexOf","colorId","push","splice","concat","pIndex","flowerColorIds","handleSelectChannelByIndex","index","handleCommitSelected","res","position","styleNo","onClose","map","name","borderRadius","fontSize","cursor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Flex, Text, Box, Button, Image } from \"rebass\"\nimport { Title } from \"./aisle-button\"\nimport { ColorList, PaintList } from \"../color-and-paint\"\nimport request from \"../../utils/request.js\"\nimport { baseUrl } from \"../../utils/helper\"\n\nexport default props => {\n\tconst { sid, top, col, styleItem } = props.currentSeleted\n\tconst [curChannelIndex, setCurChannelIndex] = useState(0)\n\t// const [curChannelInfo, setCurChannelInfo] = useState({})\n\tconst [channelList, setChannelList] = useState(false)\n\tconst [colorList, setColorList] = useState([])\n\tconst [paintList, setPaintList] = useState([])\n\tconst [sizeList, setSizeList] = useState([])\n\tconst [channelInfoList, setChannelInfoList] = useState([])\n\tuseEffect(() => {\n\t\tconst getChannels = async () => {\n\t\t\tconst req = await request(\"channel/getList\", {}, \"get\")\n\t\t\tsetChannelList(req)\n\t\t\t// console.log(\"getChannels\", req)\n\t\t}\n\t\tgetChannels()\n\t}, [])\n\tuseEffect(() => {\n\t\tif (props.currentSeleted) {\n\t\t\tconst getStyle = async () => {\n\t\t\t\tconst req = await request(\"style/detail\", { _id: sid }, \"get\")\n\t\t\t\tif (!req) return\n\t\t\t\t// console.log(\"getStyle\", req)\n\t\t\t\tsetCurChannelIndex(0)\n\t\t\t\tsetPaintList(req.flowerColors)\n\t\t\t\tsetColorList(req.plainColors)\n\t\t\t\tsetColorList(req.plainColors)\n\t\t\t\tsetChannelInfoList(req.channels)\n\t\t\t\tsetSizeList(req.size.values)\n\t\t\t}\n\t\t\tgetStyle()\n\t\t}\n\t}, [props.currentSeleted])\n\tlet left = (col + 2) * 3.2\n\tif (left > 19.2 - 6.4) {\n\t\tleft = (col - 1) * 3.2\n\t}\n\n\tconst handleSelect = (item, type) => {\n\t\tlet curChannelId = channelList[curChannelIndex]._id\n\t\tlet Index = channelInfoList.findIndex(x => x.channelId === curChannelId)\n\t\t// if (cIndex >= 0)\n\t\tconsole.log(\"curChannelId\", curChannelId)\n\t\tconsole.log(\"Index\", Index)\n\t\tconsole.log(\"Index\", channelInfoList[Index])\n\t\tlet curChannelInfo = Index >= 0 ? channelInfoList[Index] : {}\n\t\tswitch (type) {\n\t\t\tcase \"color\":\n\t\t\t\t// const cIndex = colorList.findIndex(x => x.colorId === item.colorId)\n\t\t\t\t// colorList[cIndex].selected = !colorList[cIndex].selected\n\t\t\t\t// colorList.splice(index, 1, item.selected=true)\n\t\t\t\t// setColorList([].concat(colorList))\n\n\t\t\t\tconst cIndex = curChannelInfo.plainColorIds.indexOf(item.colorId)\n\t\t\t\t// console.log(cIndex)\n\t\t\t\tif (cIndex < 0) {\n\t\t\t\t\tcurChannelInfo.plainColorIds.push(item.colorId)\n\t\t\t\t} else {\n\t\t\t\t\tcurChannelInfo.plainColorIds.splice(cIndex, 1)\n\t\t\t\t}\n\t\t\t\tsetChannelInfoList([].concat(channelInfoList))\n\t\t\t\tbreak\n\t\t\tcase \"paint\":\n\t\t\t\tconst pIndex = curChannelInfo.flowerColorIds.indexOf(item.colorId)\n\t\t\t\tif (pIndex < 0) {\n\t\t\t\t\tcurChannelInfo.flowerColorIds.push(item.colorId)\n\t\t\t\t} else {\n\t\t\t\t\tcurChannelInfo.flowerColorIds.splice(pIndex, 1)\n\t\t\t\t}\n\t\t\t\tsetChannelInfoList([].concat(channelInfoList))\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\tconst handleSelectChannelByIndex = index => {\n\t\tsetCurChannelIndex(index)\n\t}\n\tconst handleCommitSelected = index => {\n\t\tlet curChannelId = channelList[curChannelIndex]._id\n\t\tlet Index = channelInfoList.findIndex(x => x.channelId === curChannelId)\n\t\t// if (cIndex >= 0)\n\t\tlet curChannelInfo = Index >= 0 ? channelInfoList[Index] : {}\n\t\tconsole.log({\n\t\t\t_id: sid,\n\t\t\tchannelId: channelList[curChannelIndex]._id,\n\t\t\tplainColorIds: curChannelInfo.plainColorIds,\n\t\t\tflowerColorIds: curChannelInfo.flowerColorIds\n\t\t})\n\t\tconst res = request(\n\t\t\t\"/style/assign\",\n\t\t\t{\n\t\t\t\t_id: sid,\n\t\t\t\tchannelId: channelList[curChannelIndex]._id,\n\t\t\t\tplainColorIds: curChannelInfo.plainColorIds,\n\t\t\t\tflowerColorIds: curChannelInfo.flowerColorIds\n\t\t\t},\n\t\t\t\"post\"\n\t\t)\n\t\t// setChannelInfoList(res.channels)\n\t\t// console.log(res)\n\t}\n\tif (!channelList) return null\n\t// console.log(channelList, curChannelIndex)\n\treturn (\n\t\t<Flex\n\t\t\twidth=\"6.4rem\"\n\t\t\tbg=\"#fff\"\n\t\t\tflexDirection=\"column\"\n\t\t\tfontSize=\"0.18rem\"\n\t\t\tcolor=\"#000\"\n\t\t\tp=\"0.5rem 0.7rem 0 0.7rem\"\n\t\t\tsx={{\n\t\t\t\tposition: \"absolute\",\n\t\t\t\ttop: `${top}px`,\n\t\t\t\tleft: `${left}rem`\n\t\t\t}}\n\t\t>\n\t\t\t<Title\n\t\t\t\tstyleNo={styleItem.styleNo}\n\t\t\t\tchannelList={channelList}\n\t\t\t\tchannelInfoList={channelInfoList}\n\t\t\t\tonClose={props.onClose}\n\t\t\t\tcurChannelIndex={curChannelIndex}\n\t\t\t\tonSelectChannelByIndex={handleSelectChannelByIndex}\n\t\t\t/>\n\t\t\t<Flex flexDirection=\"column\">\n\t\t\t\t<Box width=\"100%\" mb=\"0.4rem\">\n\t\t\t\t\t<Text mb=\"0.1rem\">SIZE「CUP」</Text>\n\t\t\t\t\t<Flex width=\"100%\" lineHeight=\"0.36rem\">\n\t\t\t\t\t\t{sizeList.map(size => (\n\t\t\t\t\t\t\t<Text mr=\"0.2rem\">{size.name}</Text>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Flex>\n\t\t\t\t</Box>\n\t\t\t\t<ColorList\n\t\t\t\t\tcolorList={colorList}\n\t\t\t\t\thandleSelect={handleSelect}\n\t\t\t\t\tcurChannelId={channelList[curChannelIndex]._id}\n\t\t\t\t\tchannelInfoList={channelInfoList}\n\t\t\t\t/>\n\t\t\t\t<PaintList\n\t\t\t\t\tpaintList={paintList}\n\t\t\t\t\thandleSelect={handleSelect}\n\t\t\t\t\tcurChannelId={channelList[curChannelIndex]._id}\n\t\t\t\t\tchannelInfoList={channelInfoList}\n\t\t\t\t/>\n\t\t\t</Flex>\n\t\t\t<Button\n\t\t\t\tvariant=\"primary\"\n\t\t\t\theight=\"0.7rem\"\n\t\t\t\twidth=\"6.4rem\"\n\t\t\t\tbg=\"#1B1B1B\"\n\t\t\t\tcolor=\"#fff\"\n\t\t\t\tpadding=\"0\"\n\t\t\t\tml=\"-0.7rem\"\n\t\t\t\tsx={{\n\t\t\t\t\tborderRadius: 0,\n\t\t\t\t\tfontSize: \"0.14rem\",\n\t\t\t\t\tcursor: \"pointer\"\n\t\t\t\t}}\n\t\t\t\tonClick={handleCommitSelected}\n\t\t\t>\n\t\t\t\tFINISH\n\t\t\t</Button>\n\t\t</Flex>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}